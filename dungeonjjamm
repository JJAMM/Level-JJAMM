#!/usr/bin/python3

# Joint effort by: Jerry Smedley, Jacob Hilt, Melissa Barnes, Mark Montes, Anthony Chin
# This work is made available under the "MIT License". Please see the file LICENSE in this distribution for license terms.
# This is our main executable, this will pull functions from the other files to run all of them here
# *****PLEASE MAKE SURE TERMINAL IS AT LEAST 120x30 SIZE FOR PROPER PERFORMANCE*****

from start_menu import *
import os
import mapfi
import menu
import player
import re
import time
from endscreen import *


# copied exactly from: https://stackoverflow.com/questions/5967500/how-to-correctly-sort-a-string-with-a-number-inside
def atoi(text):
    return int(text) if text.isdigit() else text


# copied exactly from: https://stackoverflow.com/questions/5967500/how-to-correctly-sort-a-string-with-a-number-inside
def natural_keys(text):
    return [atoi(command) for command in re.split(r'(\d+)', text)]


def check_enemy_type(xPos, yPos, mapArr, fileNum):
    for enemy in mapArr[fileNum].enemyArr:
        if enemy.xpos == xPos and enemy.ypos == yPos:
            return enemy.typ
    return -1


def kill_enemy(xPos, yPos, mapArr, fileNum, enemyType):
    for enemy in mapArr[fileNum].enemyArr:
        if enemy.xpos == xPos and enemy.ypos == yPos and enemy.typ == enemyType:
            enemy.dead()


def use_sword(command, playObj, mapObj, mapArr, fileNum):
    if not playObj.get_sword():
        # display 'no sword' message in menu
        return
    x_destination = playObj.x_pos
    y_destination = playObj.y_pos
    if command == curses.KEY_LEFT:
        if playObj.x_pos > 0:
            x_destination -= 1
    if command == curses.KEY_RIGHT:
        if playObj.x_pos < mapObj.maxX - 1:
            x_destination += 1
    if command == curses.KEY_UP:
        if playObj.y_pos < mapObj.maxY - 1:
            y_destination -= 1
    if command == curses.KEY_DOWN:
        if playObj.y_pos > 0:
            y_destination += 1

    if x_destination >= mapObj.maxX or x_destination < 0 or y_destination >= mapObj.maxY or y_destination < 0:
        return
    enemyTyp = check_enemy_type(x_destination, y_destination, mapArr, fileNum)
    if (mapObj.objArr[y_destination][x_destination].isnumeric() and mapObj.exitArr[y_destination][x_destination] >= 0) or \
            mapObj.objArr[y_destination][x_destination] == '-' or \
            (mapObj.objArr[y_destination][x_destination].isnumeric() and mapObj.exitArr[y_destination][x_destination] < 0 and enemyTyp == 1):
        previous = mapObj.objArr[y_destination][x_destination]
        mapObj.objArr[y_destination][x_destination] = 's'
        mapObj.displayMap()
        kill_enemy(x_destination, y_destination, mapArr, fileNum, enemyTyp)
        if previous == '-' or \
                (previous.isnumeric() and mapObj.exitArr[y_destination][x_destination] < 0 and check_enemy_type(x_destination, y_destination, mapArr, fileNum) == 1):
            mapObj.objArr[y_destination][x_destination] = '-'
            time.sleep(0.2)
            mapObj.displayMap()
        elif previous.isnumeric() and mapObj.exitArr[y_destination][x_destination] >= 0:
            mapObj.objArr[y_destination][x_destination] = mapObj.initArr[y_destination][x_destination]
            time.sleep(0.2)
            mapObj.displayMap()

    curses.flushinp()


def use_bow(command, playObj, mapObj, mapArr, fileNum):
    if not playObj.get_bow():
        # display 'no bow' message in menu
        return
    x_destination = playObj.x_pos
    y_destination = playObj.y_pos
    if command == curses.KEY_LEFT:
        if playObj.x_pos > 0:
            x_destination -= 1
            while x_destination >= 0:
                if mapObj.objArr[y_destination][x_destination] == '-' or \
                        (mapObj.objArr[y_destination][x_destination].isnumeric() and mapObj.exitArr[y_destination][x_destination] >= 0):
                    previous = mapObj.objArr[y_destination][x_destination]
                    mapObj.objArr[y_destination][x_destination] = 'b_l_atk'
                    mapObj.displayMap()
                    mapObj.objArr[y_destination][x_destination] = previous
                    mapObj.stdscr.refresh()
                    time.sleep(0.1)
                    mapObj.displayMap()
                    x_destination -= 1
                else:
                    if mapObj.objArr[y_destination][x_destination].isnumeric() and mapObj.exitArr[y_destination][x_destination] < 0:
                        enemyType = check_enemy_type(x_destination, y_destination, mapArr, fileNum)
                        if enemyType == 2:
                            kill_enemy(x_destination, y_destination, mapArr, fileNum, enemyType)
                            mapObj.objArr[y_destination][x_destination] = 'b_l_atk'
                            mapObj.displayMap()
                            mapObj.objArr[y_destination][x_destination] = '-'
                            mapObj.stdscr.refresh()
                            time.sleep(0.1)
                            mapObj.displayMap()
                    break

    if command == curses.KEY_RIGHT:
        if playObj.x_pos < mapObj.maxX - 1:
            x_destination += 1
            while x_destination <= mapObj.maxX - 1:
                if mapObj.objArr[y_destination][x_destination] == '-' or \
                        (mapObj.objArr[y_destination][x_destination].isnumeric() and mapObj.exitArr[y_destination][x_destination] >= 0):
                    previous = mapObj.objArr[y_destination][x_destination]
                    mapObj.objArr[y_destination][x_destination] = 'b_r_atk'
                    mapObj.displayMap()
                    mapObj.objArr[y_destination][x_destination] = previous
                    mapObj.stdscr.refresh()
                    time.sleep(0.1)
                    mapObj.displayMap()
                    x_destination += 1
                else:
                    if mapObj.objArr[y_destination][x_destination].isnumeric() and mapObj.exitArr[y_destination][x_destination] < 0:
                        enemyType = check_enemy_type(x_destination, y_destination, mapArr, fileNum)
                        if enemyType == 2:
                            kill_enemy(x_destination, y_destination, mapArr, fileNum, enemyType)
                            mapObj.objArr[y_destination][x_destination] = 'b_r_atk'
                            mapObj.displayMap()
                            mapObj.objArr[y_destination][x_destination] = '-'
                            mapObj.stdscr.refresh()
                            time.sleep(0.1)
                            mapObj.displayMap()
                    break

    if command == curses.KEY_UP:
        if playObj.y_pos < mapObj.maxY - 1:
            y_destination -= 1
            while y_destination >= 0:
                if mapObj.objArr[y_destination][x_destination] == '-' or \
                        (mapObj.objArr[y_destination][x_destination].isnumeric() and mapObj.exitArr[y_destination][x_destination] >= 0):
                    previous = mapObj.objArr[y_destination][x_destination]
                    mapObj.objArr[y_destination][x_destination] = 'b_u_atk'
                    mapObj.displayMap()
                    mapObj.objArr[y_destination][x_destination] = previous
                    mapObj.stdscr.refresh()
                    time.sleep(0.1)
                    mapObj.displayMap()
                    y_destination -= 1
                else:
                    if mapObj.objArr[y_destination][x_destination].isnumeric() and mapObj.exitArr[y_destination][x_destination] < 0:
                        enemyType = check_enemy_type(x_destination, y_destination, mapArr, fileNum)
                        if enemyType == 2:
                            kill_enemy(x_destination, y_destination, mapArr, fileNum, enemyType)
                            mapObj.objArr[y_destination][x_destination] = 'b_u_atk'
                            mapObj.displayMap()
                            mapObj.objArr[y_destination][x_destination] = '-'
                            mapObj.stdscr.refresh()
                            time.sleep(0.1)
                            mapObj.displayMap()
                    break

    if command == curses.KEY_DOWN:
        if playObj.y_pos > 0:
            y_destination += 1
            while y_destination <= mapObj.maxY - 1:
                if mapObj.objArr[y_destination][x_destination] == '-' or \
                        (mapObj.objArr[y_destination][x_destination].isnumeric() and mapObj.exitArr[y_destination][x_destination] >= 0):
                    previous = mapObj.objArr[y_destination][x_destination]
                    mapObj.objArr[y_destination][x_destination] = 'b_d_atk'
                    mapObj.displayMap()
                    mapObj.objArr[y_destination][x_destination] = previous
                    mapObj.stdscr.refresh()
                    time.sleep(0.1)
                    mapObj.displayMap()
                    y_destination += 1
                else:
                    if mapObj.objArr[y_destination][x_destination].isnumeric() and mapObj.exitArr[y_destination][x_destination] < 0:
                        enemyType = check_enemy_type(x_destination, y_destination, mapArr, fileNum)
                        if enemyType == 2:
                            kill_enemy(x_destination, y_destination, mapArr, fileNum, enemyType)
                            mapObj.objArr[y_destination][x_destination] = 'b_d_atk'
                            mapObj.displayMap()
                            mapObj.objArr[y_destination][x_destination] = '-'
                            mapObj.stdscr.refresh()
                            time.sleep(0.1)
                            mapObj.displayMap()
                    break
    curses.flushinp()


def use_shurikens(playObj, mapObj, mapArr, fileNum):
    if not playObj.get_shurikens():
        return
    x_destination = playObj.x_pos
    y_destination = playObj.y_pos

    if (x_destination - 1) >= 0 and (y_destination + 1) <= mapObj.maxY - 1:
        enemyType = check_enemy_type(x_destination - 1, y_destination + 1, mapArr, fileNum)
        if mapObj.objArr[y_destination + 1][x_destination - 1] == '-' or \
                (mapObj.objArr[y_destination + 1][x_destination - 1].isnumeric() and mapObj.exitArr[y_destination + 1][x_destination - 1] >= 0) or \
                (mapObj.objArr[y_destination + 1][x_destination - 1].isnumeric() and mapObj.exitArr[y_destination + 1][x_destination - 1] < 0 and enemyType == 3):
            kill_enemy(x_destination - 1, y_destination + 1, mapArr, fileNum, enemyType)
            previous_bl = mapObj.objArr[y_destination + 1][x_destination - 1]
            mapObj.objArr[y_destination + 1][x_destination - 1] = 'sh_atk'

    if (x_destination - 1) >= 0 and (y_destination - 1) >= 0:
        enemyType = check_enemy_type(x_destination - 1, y_destination - 1, mapArr, fileNum)
        if mapObj.objArr[y_destination - 1][x_destination - 1] == '-' or \
                (mapObj.objArr[y_destination - 1][x_destination - 1].isnumeric() and mapObj.exitArr[y_destination - 1][x_destination - 1] >= 0) or \
                (mapObj.objArr[y_destination - 1][x_destination - 1].isnumeric() and mapObj.exitArr[y_destination - 1][x_destination - 1] < 0 and enemyType == 3):
            kill_enemy(x_destination - 1, y_destination - 1, mapArr, fileNum, enemyType)
            previous_ul = mapObj.objArr[y_destination - 1][x_destination - 1]
            mapObj.objArr[y_destination - 1][x_destination - 1] = 'sh_atk'

    if (x_destination + 1) <= mapObj.maxX - 1 and (y_destination + 1) <= mapObj.maxY - 1:
        enemyType = check_enemy_type(x_destination + 1, y_destination + 1, mapArr, fileNum)
        if mapObj.objArr[y_destination + 1][x_destination + 1] == '-' or \
                (mapObj.objArr[y_destination + 1][x_destination + 1].isnumeric() and mapObj.exitArr[y_destination + 1][x_destination + 1] >= 0) or \
                (mapObj.objArr[y_destination + 1][x_destination + 1].isnumeric() and mapObj.exitArr[y_destination + 1][x_destination + 1] < 0 and enemyType == 3):
            kill_enemy(x_destination + 1, y_destination + 1, mapArr, fileNum, enemyType)
            previous_br = mapObj.objArr[y_destination + 1][x_destination + 1]
            mapObj.objArr[y_destination + 1][x_destination + 1] = 'sh_atk'

    if (x_destination + 1) <= mapObj.maxX - 1 and (y_destination - 1) >= 0:
        enemyType = check_enemy_type(x_destination + 1, y_destination - 1, mapArr, fileNum)
        if mapObj.objArr[y_destination - 1][x_destination + 1] == '-' or \
                (mapObj.objArr[y_destination - 1][x_destination + 1].isnumeric() and mapObj.exitArr[y_destination - 1][x_destination + 1] >= 0) or \
                (mapObj.objArr[y_destination - 1][x_destination + 1].isnumeric() and mapObj.exitArr[y_destination - 1][x_destination + 1] < 0 and enemyType == 3):
            kill_enemy(x_destination + 1, y_destination - 1, mapArr, fileNum, enemyType)
            previous_ur = mapObj.objArr[y_destination - 1][x_destination + 1]
            mapObj.objArr[y_destination - 1][x_destination + 1] = 'sh_atk'

    mapObj.displayMap()

    if (x_destination - 1) >= 0 and (y_destination + 1) <= mapObj.maxY - 1:
        if mapObj.objArr[y_destination + 1][x_destination - 1] == 'sh_atk':
            if mapObj.exitArr[y_destination + 1][x_destination - 1] < 0:
                mapObj.objArr[y_destination + 1][x_destination - 1] = '-'
            else:
                mapObj.objArr[y_destination + 1][x_destination - 1] = previous_bl

    if (x_destination - 1) >= 0 and (y_destination - 1) >= 0:
        if mapObj.objArr[y_destination - 1][x_destination - 1] == 'sh_atk':
            if mapObj.exitArr[y_destination - 1][x_destination - 1] < 0:
                mapObj.objArr[y_destination - 1][x_destination - 1] = '-'
            else:
                mapObj.objArr[y_destination - 1][x_destination - 1] = previous_ul

    if (x_destination + 1) <= mapObj.maxX - 1 and (y_destination + 1) <= mapObj.maxY - 1:
        if mapObj.objArr[y_destination + 1][x_destination + 1] == 'sh_atk':
            if mapObj.exitArr[y_destination + 1][x_destination + 1] < 0:
                mapObj.objArr[y_destination + 1][x_destination + 1] = '-'
            else:
                mapObj.objArr[y_destination + 1][x_destination + 1] = previous_br

    if (x_destination + 1) <= mapObj.maxX - 1 and (y_destination - 1) >= 0:
        if mapObj.objArr[y_destination - 1][x_destination + 1] == 'sh_atk':
            if mapObj.exitArr[y_destination - 1][x_destination + 1] < 0:
                mapObj.objArr[y_destination - 1][x_destination + 1] = '-'
            else:
                mapObj.objArr[y_destination - 1][x_destination + 1] = previous_ur

    time.sleep(0.2)
    mapObj.displayMap()
    curses.flushinp()


def game(command, playObj, mapObj, mapArr, fileNum):
    newMap = None
    if command == ord('w'):
        newMap = playObj.move('w', mapObj, fileNum)

    elif command == ord('a'):
        newMap = playObj.move('a', mapObj, fileNum)

    elif command == ord('s'):
        newMap = playObj.move('s', mapObj, fileNum)

    elif command == ord('d'):
        newMap = playObj.move('d', mapObj, fileNum)

    elif command == curses.KEY_LEFT or command == curses.KEY_RIGHT or command == curses.KEY_UP or command == curses.KEY_DOWN:
        equipped = playObj.get_equipped()
        if equipped == 'sword':
            use_sword(command, playObj, mapObj, mapArr, fileNum)
        elif equipped == 'bow':
            use_bow(command, playObj, mapObj, mapArr, fileNum)
        elif equipped == 'shurikens':
            use_shurikens(playObj, mapObj, mapArr, fileNum)

    elif command == ord('r'):
        mapObj.reset(playObj)

    elif command == ord('1'):
        playObj.swap_equipped('sword')

    elif command == ord('2'):
        if playObj.get_bow():
            playObj.swap_equipped('bow')

    elif command == ord('3'):
        if playObj.get_shurikens():
            playObj.swap_equipped('shurikens')

    mapObj.displayMap()
    # menuObj.display_menu(mapObj.maxX+2, playObj, mapObj)

    return newMap


def main():
    mode = start_menu()
    if mode == 'Start':
        path = 'levels'
    elif mode == 'Tutorial':
        path = 'tutorials'
    elif mode == 'Load Custom':
        path = input('input the directory name: ')
    elif mode == 'Quit':
        curses.endwin()
        return

    path = './AllLevels/' + path
    if not os.path.isdir(path):
        return
    inFile = []
    mapArr = []

    # https://careerkarma.com/blog/python-list-files-in-directory/
    for root, directories, files in os.walk(path, topdown=False):
        for name in files:
            inFile.append(os.path.join(root, name))
        for name in directories:
            inFile.append(os.path.join(root, name))
    inFile.sort(key=natural_keys)

    fileNum = 0
    while fileNum < len(inFile):
        mapArr.append(mapfi.Map())
        playerY, playerX = mapArr[fileNum].loadMap(inFile[fileNum])
        mapArr[fileNum].loadExits()
        mapArr[fileNum].loadEnemy()
        fileNum += 1

    fileNum = 0
    while fileNum < len(mapArr):
        mapArr[fileNum].setupMap()
        fileNum += 1

    fileNum = 0
    newMap = 0
    menuObj = menu.Menu()
    playObj = player.Player()
    enemyTime = time.time()

    while 0 <= fileNum < len(inFile):
        playObj.y_pos = mapArr[fileNum].startY
        playObj.x_pos = mapArr[fileNum].startX
        mapArr[fileNum].displayMap()
        menuObj.display_menu(mapArr[fileNum].maxX + 2, playObj, mapArr[fileNum])
        mapArr[fileNum].stdscr.nodelay(False)
        while True:
            command = mapArr[fileNum].stdscr.getch()

            if command != -1:
                mapArr[fileNum].stdscr.nodelay(True)
                if command == ord('q'):  # or command == ord('n'): # Dev feature, allowed skipping levels
                    if (fileNum + 1) < len(inFile):
                        fileNum += 1
                    else:
                        fileNum = -1
                    break
                else:
                    newMap = game(command, playObj, mapArr[fileNum], mapArr, fileNum)
                    menuObj.display_menu(mapArr[fileNum].maxX + 2, playObj, mapArr[fileNum])

            # Enemy movement
            currTime = time.time()
            if currTime - enemyTime >= 2:
                for enemy in mapArr[fileNum].enemyArr:
                    check = enemy.movement(mapArr[fileNum])
                    if check[0] == 2:
                        mapArr[fileNum].reset(playObj)
                enemyTime = time.time()
                mapArr[fileNum].displayMap()
                menuObj.display_menu(mapArr[fileNum].maxX + 2, playObj, mapArr[fileNum])

            # https://stackoverflow.com/questions/2259228/how-are-booleans-formatted-in-strings-in-python
            if isinstance(newMap, int):
                if newMap > fileNum:
                    mapArr[fileNum].winCond = 'T'
                mapArr[fileNum].stdscr.clear()
                fileNum = newMap
                break

        if command == ord('q'):  # or command == ord('n'): # Dev feature, allowed skipping levels
            mapArr[fileNum].stdscr.clear()
            mapArr[fileNum].stdscr.refresh()
            break

    if fileNum >= len(inFile):
        fileNum = 0
        end_screen(mapArr[fileNum].stdscr, playObj, menuObj)

    curses.nocbreak()
    mapArr[fileNum].stdscr.keypad(False)
    curses.echo()
    curses.endwin()


if __name__ == "__main__":
    main()
