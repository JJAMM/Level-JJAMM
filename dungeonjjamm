#!/usr/bin/python3

# This is our main excutable, this will pull functions from the other files to run all of them here

import curses
#from curses import wrapper
import os
import mapfi
import creature
import menu
import player
import time #found sleep function at https://www.tutorialspoint.com/python3/time_sleep.htm
import re

def atoi(text): # copied exactly from: https://stackoverflow.com/questions/5967500/how-to-correctly-sort-a-string-with-a-number-inside
    return int(text) if text.isdigit() else text

def natural_keys(text): # copied exactly from: https://stackoverflow.com/questions/5967500/how-to-correctly-sort-a-string-with-a-number-inside
    return [ atoi(c) for c in re.split(r'(\d+)', text) ]

def use_sword(c, playObj, mapObj):
    if playObj.get_sword() == False:
        #display 'no sword' message in menu
        return
    xDes = playObj.x_pos
    yDes = playObj.y_pos
    if c == curses.KEY_LEFT:
        if playObj.x_pos > 0:
            xDes -= 1
    if c == curses.KEY_RIGHT:
        if playObj.x_pos < mapObj.maxX - 1:
            xDes += 1
    if c == curses.KEY_UP:
        if playObj.y_pos < mapObj.maxY - 1:
            yDes -= 1
    if c == curses.KEY_DOWN:
        if playObj.y_pos > 0:
            yDes += 1

    if xDes >= mapObj.maxX or xDes < 0 or yDes >= mapObj.maxY or yDes < 0:
        return
    if mapObj.objArr[yDes][xDes] == '1' or mapObj.objArr[yDes][xDes] == '-' or mapObj.objArr[yDes][xDes] == 'e':
        previous =  mapObj.objArr[yDes][xDes]
        mapObj.objArr[yDes][xDes] = 's'
        mapObj.displayMap()
        if previous == '-' or previous == '1':
            mapObj.objArr[yDes][xDes] = '-'
            time.sleep(0.2)
            mapObj.displayMap()
        elif previous == 'e':
            mapObj.objArr[yDes][xDes] = 'e'
            time.sleep(0.2)
            mapObj.displayMap()


def use_bow(c, playObj, mapObj):
    if playObj.get_bow() == False:
        #display 'no bow' message in menu
        return
    xDes = playObj.x_pos
    yDes = playObj.y_pos
    if c == curses.KEY_LEFT:
        if  playObj.x_pos > 0:
            xDes -= 1
            while xDes > 0:
                if mapObj.objArr[yDes][xDes] == '-' or mapObj.objArr[yDes][xDes] == 'e':
                    previous = mapObj.objArr[yDes][xDes]
                    mapObj.objArr[yDes][xDes] = 'b'
                    mapObj.displayMap()
                    mapObj.objArr[yDes][xDes] = previous
                    mapObj.stdscr.refresh()
                    time.sleep(0.1)
                    mapObj.displayMap()
                    xDes-=1
                else:
                    if mapObj.objArr[yDes][xDes] == '1':
                        mapObj.objArr[yDes][xDes] = 'b'
                        mapObj.displayMap()
                        mapObj.objArr[yDes][xDes] = '-'
                        mapObj.stdscr.refresh()
                        time.sleep(0.1)
                        mapObj.displayMap()
                    break

    if c == curses.KEY_RIGHT:
        if playObj.x_pos < mapObj.maxX - 1:
            xDes += 1
            while xDes < mapObj.maxX - 1:
                if mapObj.objArr[yDes][xDes] == '-' or mapObj.objArr[yDes][xDes] == 'e':
                    previous = mapObj.objArr[yDes][xDes]
                    mapObj.objArr[yDes][xDes] = 'b'
                    mapObj.displayMap()
                    mapObj.objArr[yDes][xDes] = previous
                    mapObj.stdscr.refresh()
                    time.sleep(0.1)
                    mapObj.displayMap()
                    xDes += 1
                else:
                    if mapObj.objArr[yDes][xDes] == '1':
                        mapObj.objArr[yDes][xDes] = 'b'
                        mapObj.displayMap()
                        mapObj.objArr[yDes][xDes] = '-'
                        mapObj.stdscr.refresh()
                        time.sleep(0.1)
                        mapObj.displayMap()
                    break

    if c == curses.KEY_UP:
        if playObj.y_pos < mapObj.maxY - 1:
            yDes -= 1
            while yDes < mapObj.maxY - 1:
                if mapObj.objArr[yDes][xDes] == '-' or mapObj.objArr[yDes][xDes] == 'e':
                    previous = mapObj.objArr[yDes][xDes]
                    mapObj.objArr[yDes][xDes] = 'b'
                    mapObj.displayMap()
                    mapObj.objArr[yDes][xDes] = previous
                    mapObj.stdscr.refresh()
                    time.sleep(0.1)
                    mapObj.displayMap()
                    yDes -= 1
                else:
                    if mapObj.objArr[yDes][xDes] == '1':
                        mapObj.objArr[yDes][xDes] = 'b'
                        mapObj.displayMap()
                        mapObj.objArr[yDes][xDes] = '-'
                        mapObj.stdscr.refresh()
                        time.sleep(0.1)
                        mapObj.displayMap()
                    break

    if c == curses.KEY_DOWN:
        if playObj.y_pos > 0:
            yDes += 1
            while yDes > 0:
                if mapObj.objArr[yDes][xDes] == '-' or mapObj.objArr[yDes][xDes] == 'e':
                    previous = mapObj.objArr[yDes][xDes]
                    mapObj.objArr[yDes][xDes] = 'b'
                    mapObj.displayMap()
                    mapObj.objArr[yDes][xDes] = previous
                    mapObj.stdscr.refresh()
                    time.sleep(0.1)
                    mapObj.displayMap()
                    yDes += 1
                else:
                    if mapObj.objArr[yDes][xDes] == '1':
                        mapObj.objArr[yDes][xDes] = 'b'
                        mapObj.displayMap()
                        mapObj.objArr[yDes][xDes] = '-'
                        mapObj.stdscr.refresh()
                        time.sleep(0.1)
                        mapObj.displayMap()
                    break

if __name__ == "__main__":

    # path = input('input the directory name: ')
    path = 'tutorials' # Temporary, for testing
    path = './' + path
    # mapArr[fileNum] = mapfi.Map()
    inFile = []
    mapArr = []
    # path = './levels'

    for root, directories, files in os.walk(path, topdown=False): # https://careerkarma.com/blog/python-list-files-in-directory/
        for name in files:
            inFile.append(os.path.join(root, name))
        for name in directories:
            inFile.append(os.path.join(root, name))
    inFile.sort(key=natural_keys)

    fileNum = 0
    while fileNum < len(inFile):
        mapArr.append(mapfi.Map())
        playerY, playerX = mapArr[fileNum].loadMap(inFile[fileNum])
        mapArr[fileNum].loadExits()
        mapArr[fileNum].loadEnemy()
        fileNum += 1

    fileNum = 0
    while fileNum < len(mapArr):
        mapArr[fileNum].setupMap()
        # mapArr[fileNum].printObjLets()
        # print()
        fileNum += 1

    fileNum = 0
    newMap = 0
    # preFile = 0
    menuObj = menu.Menu()
    playObj = player.Player()

    while fileNum >= 0 and fileNum < len(inFile):
        playObj.y_pos = mapArr[fileNum].startY
        playObj.x_pos = mapArr[fileNum].startX
        #mapArr[fileNum].displayMap()
        menuObj.display_menu(mapArr[fileNum].maxX+2, playObj, mapArr[fileNum])
        # mapArr[fileNum].stdscr.addstr(mapArr[fileNum].maxY+1, 0, "Enter 'q' to exit, 'n' for next level", curses.color_pair(7))
        while True:
            mapArr[fileNum].displayMap()
            # Here we can call a gameplay function, which will
            # take in user input and decide what to do based
            # on it, as well as control enemies
            c = mapArr[fileNum].stdscr.getch()
            if c == ord('q') or c == ord('n'):
                if ((fileNum + 1) < len(inFile)):
                    fileNum += 1
                else:
                    fileNum = -1
                break

            elif c == ord('w'):
                newMap = playObj.move('w', mapArr[fileNum])

            elif c == ord('a'):
                newMap = playObj.move('a', mapArr[fileNum])
            
            elif c == ord('s'):
                newMap = playObj.move('s', mapArr[fileNum])

            elif c == ord('d'):
                newMap = playObj.move('d', mapArr[fileNum])

            elif c == curses.KEY_LEFT or c == curses.KEY_RIGHT or c == curses.KEY_UP or c == curses.KEY_DOWN:
                equipped = playObj.get_equipped()
                if equipped == 'sword':
                    use_sword(c, playObj, mapArr[fileNum])
                elif equipped == 'bow':
                    use_bow(c, playObj, mapArr[fileNum])

            elif c == ord('r'):
                mapArr[fileNum].reset(playObj)

            elif c == ord('1'):
                if playObj.get_sword():
                    playObj.swap_equipped('sword')

            elif c == ord('2'):
                if playObj.get_bow():
                    playObj.swap_equipped('bow')


            menuObj.display_menu(mapArr[fileNum].maxX+2, playObj, mapArr[fileNum])
            # mapArr[fileNum].printInitLets()
            # mapArr[fileNum].printObjLets()

            #Enemy movement
            for enemy in mapArr[fileNum].enemyArr:
                check = enemy.movement(mapArr[fileNum])
                if(check[0] == 2):
                    mapArr[fileNum].reset(playObj)
        
            


            # https://stackoverflow.com/questions/2259228/how-are-booleans-formatted-in-strings-in-python
            # mapArr[fileNum].stdscr.addstr(mapArr[fileNum].maxY+2, 0, '%s' % (playObj.sword), curses.color_pair(7)) 
            if isinstance(newMap, int):
                mapArr[fileNum].winCond = 'T'
                mapArr[fileNum].stdscr.clear()
                fileNum = newMap
                break
            elif isinstance(newMap, str):
                c = 'q'
                fileNum = -1
                break
            
            #print("x: ", playObj.x_pos, "y: ", playObj.y_pos) test to see if map bounds weren't violated.


        if c == ord('q') or c == ord('n'):
            mapArr[fileNum].stdscr.clear()
            mapArr[fileNum].stdscr.refresh()
            if c == ord('q'):
                break

        '''
        mapArr[fileNum].stdscr.clear()
        mapArr[fileNum].stdscr.refresh()
        fileNum += 1
        '''

    if fileNum >= len(inFile): fileNum = 0
    curses.nocbreak()
    mapArr[fileNum].stdscr.keypad(False)
    curses.echo()
    curses.endwin()


    # print('maxY: ', mapArr[fileNum].maxY, '\nmaxX: ', mapArr[fileNum].maxX) # This was a test,
    # proves that we don't need a getter, we can reference class objects directly
