#!/usr/bin/python3

# This is our main excutable, this will pull functions from the other files to run all of them here

import curses
#from curses import wrapper
import os
import mapfi
import creature
import menu
import player
import time #found sleep function at https://www.tutorialspoint.com/python3/time_sleep.htm

def use_sword(c, playObj, mapObj):
    if playObj.get_sword() == False:
        #display 'no sword' message in menu
        return
    xDes = playObj.x_pos
    yDes = playObj.y_pos
    if c == curses.KEY_LEFT:
        if playObj.x_pos > 0:
            xDes -= 1
    if c == curses.KEY_RIGHT:
        if playObj.x_pos < mapObj.maxX - 1:
            xDes += 1
    if c == curses.KEY_UP:
        if playObj.y_pos < mapObj.maxY - 1:
            yDes -= 1
    if c == curses.KEY_DOWN:
        if playObj.y_pos > 0:
            yDes += 1

    if xDes >= mapObj.maxX or xDes < 0 or yDes >= mapObj.maxY or yDes < 0:
        return
    if mapObj.objArr[yDes][xDes] == '1' or mapObj.objArr[yDes][xDes] == '-' or mapObj.objArr[yDes][xDes] == 'e':
        previous =  mapObj.objArr[yDes][xDes]
        mapObj.objArr[yDes][xDes] = 's'
        mapObj.displayMap()
        if previous == '-' or previous == '1':
            mapObj.objArr[yDes][xDes] = '-'
            mapObj.stdscr.refresh()
            time.sleep(0.1)
            mapObj.displayMap()
        elif previous == 'e':
            mapObj.objArr[yDes][xDes] = 'e'
            mapObj.stdscr.refresh()
            time.sleep(0.25)
            mapObj.displayMap()


def use_bow(c, playObj, mapObj):
    if playObj.get_bow() == False:
        #display 'no bow' message in menu
        return
    xDes = playObj.x_pos
    yDes = playObj.y_pos
    if c == curses.KEY_LEFT:
        if  playObj.x_pos > 0:
            xDes -= 1
            while xDes > 0:
                if mapObj.objArr[yDes][xDes] == '-' or mapObj.objArr[yDes][xDes] == 'e':
                    previous = mapObj.objArr[yDes][xDes]
                    mapObj.objArr[yDes][xDes] = 'b'
                    mapObj.displayMap()
                    mapObj.objArr[yDes][xDes] = previous
                    mapObj.stdscr.refresh()
                    time.sleep(0.1)
                    mapObj.displayMap()
                    xDes-=1
                else:
                    if mapObj.objArr[yDes][xDes] == '1':
                        mapObj.objArr[yDes][xDes] = 'b'
                        mapObj.displayMap()
                        mapObj.objArr[yDes][xDes] = '-'
                        mapObj.stdscr.refresh()
                        time.sleep(0.1)
                        mapObj.displayMap()
                    break

    if c == curses.KEY_RIGHT:
        if playObj.x_pos < mapObj.maxX - 1:
            xDes += 1
            while xDes < mapObj.maxX - 1:
                if mapObj.objArr[yDes][xDes] == '-' or mapObj.objArr[yDes][xDes] == 'e':
                    previous = mapObj.objArr[yDes][xDes]
                    mapObj.objArr[yDes][xDes] = 'b'
                    mapObj.displayMap()
                    mapObj.objArr[yDes][xDes] = previous
                    mapObj.stdscr.refresh()
                    time.sleep(0.1)
                    mapObj.displayMap()
                    xDes += 1
                else:
                    if mapObj.objArr[yDes][xDes] == '1':
                        mapObj.objArr[yDes][xDes] = 'b'
                        mapObj.displayMap()
                        mapObj.objArr[yDes][xDes] = '-'
                        mapObj.stdscr.refresh()
                        time.sleep(0.1)
                        mapObj.displayMap()
                    break

    if c == curses.KEY_UP:
        if playObj.y_pos < mapObj.maxY - 1:
            yDes -= 1
            while yDes < mapObj.maxY - 1:
                if mapObj.objArr[yDes][xDes] == '-' or mapObj.objArr[yDes][xDes] == 'e':
                    previous = mapObj.objArr[yDes][xDes]
                    mapObj.objArr[yDes][xDes] = 'b'
                    mapObj.displayMap()
                    mapObj.objArr[yDes][xDes] = previous
                    mapObj.stdscr.refresh()
                    time.sleep(0.1)
                    mapObj.displayMap()
                    yDes -= 1
                else:
                    if mapObj.objArr[yDes][xDes] == '1':
                        mapObj.objArr[yDes][xDes] = 'b'
                        mapObj.displayMap()
                        mapObj.objArr[yDes][xDes] = '-'
                        mapObj.stdscr.refresh()
                        time.sleep(0.1)
                        mapObj.displayMap()
                    break

    if c == curses.KEY_DOWN:
        if playObj.y_pos > 0:
            yDes += 1
            while yDes > 0:
                if mapObj.objArr[yDes][xDes] == '-' or mapObj.objArr[yDes][xDes] == 'e':
                    previous = mapObj.objArr[yDes][xDes]
                    mapObj.objArr[yDes][xDes] = 'b'
                    mapObj.displayMap()
                    mapObj.objArr[yDes][xDes] = previous
                    mapObj.stdscr.refresh()
                    time.sleep(0.1)
                    mapObj.displayMap()
                    yDes += 1
                else:
                    if mapObj.objArr[yDes][xDes] == '1':
                        mapObj.objArr[yDes][xDes] = 'b'
                        mapObj.displayMap()
                        mapObj.objArr[yDes][xDes] = '-'
                        mapObj.stdscr.refresh()
                        time.sleep(0.1)
                        mapObj.displayMap()
                    break

if __name__ == "__main__":

    # path = input('input the directory name: ')
    path = 'tutorials' # Temporary, for testing
    path = './' + path
    mapObj = mapfi.Map()
    inFile = []
    # path = './levels'

    for root, directories, files in os.walk(path, topdown=False): # https://careerkarma.com/blog/python-list-files-in-directory/
        for name in files:
            inFile.append(os.path.join(root, name))
        for name in directories:
            inFile.append(os.path.join(root, name))
    inFile.sort()

    fileNum = 0
    mapObj.setupMap()
    menuObj = menu.Menu()
    playObj = player.Player()
    for fi in inFile:
        playerY, playerX = mapObj.loadMap(inFile[fileNum])
        playObj.y_pos = playerY
        playObj.x_pos = playerX
        playObj.debugMode() # DEBUG, remove before release
        mapObj.displayMap()
        menuObj.display_menu(mapObj.maxX+2, playObj, mapObj)
        # mapObj.displayMap()
        mapObj.stdscr.addstr(mapObj.maxY+1, 0, "Enter 'q' to exit, 'n' for next level", curses.color_pair(7))
        win = False
        while True:
            # Here we can call a gameplay function, which will
            # take in user input and decide what to do based
            # on it, as well as control enemies
            c = mapObj.stdscr.getch()
            if c == ord('q') or c == ord('n'):
                break

            elif c == ord('w'):
                win = playObj.move('w', mapObj)

            elif c == ord('a'):
                win = playObj.move('a', mapObj)
            
            elif c == ord('s'):
                win = playObj.move('s', mapObj)

            elif c == ord('d'):
                win = playObj.move('d', mapObj)

            elif c == curses.KEY_LEFT or c == curses.KEY_RIGHT or c == curses.KEY_UP or c == curses.KEY_DOWN:
                equipped = playObj.get_equipped()
                if equipped == 'sword':
                    use_sword(c, playObj, mapObj)
                elif equipped == 'bow':
                    use_bow(c, playObj, mapObj)

            elif c == ord('r'):
                mapObj.reset(playObj)

            elif c == ord('1'):
                if playObj.get_sword():
                    playObj.swap_equipped('sword')

            elif c == ord('2'):
                if playObj.get_bow():
                    playObj.swap_equipped('bow')

            menuObj.display_menu(mapObj.maxX+2, playObj, mapObj)
            # https://stackoverflow.com/questions/2259228/how-are-booleans-formatted-in-strings-in-python
            # mapObj.stdscr.addstr(mapObj.maxY+2, 0, '%s' % (playObj.sword), curses.color_pair(7)) 
            if win:
                win = False
                break
            
            #print("x: ", playObj.x_pos, "y: ", playObj.y_pos) test to see if map bounds weren't violated.

        if c == ord('q'):
            mapObj.stdscr.clear()
            mapObj.stdscr.refresh()
            break

        mapObj.stdscr.clear()
        mapObj.stdscr.refresh()
        fileNum += 1

    curses.nocbreak()
    mapObj.stdscr.keypad(False)
    curses.echo()
    curses.endwin()

    # print('maxY: ', mapObj.maxY, '\nmaxX: ', mapObj.maxX) # This was a test,
    # proves that we don't need a getter, we can reference class objects directly
