#!/usr/bin/python3

# This is our main excutable, this will pull functions from the other files to run all of them here

import curses
#from curses import wrapper
import os
import mapfi
import creature
import menu
import player
import time #found sleep function at https://www.tutorialspoint.com/python3/time_sleep.htm

def use_weapon(c, playObj, mapObj):
    if playObj.get_sword() == False:
        #display 'no sword' message in menu
        return
    if c == curses.KEY_LEFT:
        if playObj.x_pos > 0:
            if mapObj.objArr[playObj.y_pos][playObj.x_pos - 1] == '1':
                mapObj.objArr[playObj.y_pos][playObj.x_pos - 1] = 's'
                mapObj.displayMap()
                mapObj.objArr[playObj.y_pos][playObj.x_pos - 1] = '-'
                mapObj.stdscr.refresh()
                time.sleep(0.5)
                mapObj.displayMap()
    if c == curses.KEY_RIGHT:
        if playObj.x_pos < mapObj.maxX - 1:
            if mapObj.objArr[playObj.y_pos][playObj.x_pos + 1] == '1':
                mapObj.objArr[playObj.y_pos][playObj.x_pos + 1] = 's'
                mapObj.displayMap()
                mapObj.objArr[playObj.y_pos][playObj.x_pos + 1] = '-'
                mapObj.stdscr.refresh()
                time.sleep(0.5)
                mapObj.displayMap()
    if c == curses.KEY_UP:
        if playObj.y_pos < mapObj.maxY - 1:
            if mapObj.objArr[playObj.y_pos - 1][playObj.x_pos] == '1':
                mapObj.objArr[playObj.y_pos - 1][playObj.x_pos] = 's'
                mapObj.displayMap()
                mapObj.objArr[playObj.y_pos - 1][playObj.x_pos] = '-'
                mapObj.stdscr.refresh()
                time.sleep(0.5)
                mapObj.displayMap()
    if c == curses.KEY_DOWN:
        if playObj.y_pos > 0:
            if mapObj.objArr[playObj.y_pos + 1][playObj.x_pos] == '1':
                mapObj.objArr[playObj.y_pos + 1][playObj.x_pos] = 's'
                mapObj.displayMap()
                mapObj.objArr[playObj.y_pos + 1][playObj.x_pos] = '-'
                mapObj.stdscr.refresh()
                time.sleep(0.5)
                mapObj.displayMap()



if __name__ == "__main__":

    # path = input('input the directory name: ')
    path = 'levels' # Temporary, for testing
    path = './' + path
    mapObj = mapfi.Map()
    inFile = []
    # path = './levels'

    for root, directories, files in os.walk(path, topdown=False): # https://careerkarma.com/blog/python-list-files-in-directory/
        for name in files:
            inFile.append(os.path.join(root, name))
        for name in directories:
            inFile.append(os.path.join(root, name))
    inFile.sort()

    fileNum = 0
    mapObj.setupMap()
    menuObj = menu.Menu()
    for fi in inFile:
        playerY, playerX = mapObj.loadMap(inFile[fileNum])
        playObj = player.Player(playerY, playerX)
        mapObj.displayMap()
        menuObj.display_menu(mapObj.maxX+2)
        # mapObj.displayMap()
        mapObj.stdscr.addstr(mapObj.maxX+1, 0, "Enter 'q' to exit, 'n' for next level", curses.color_pair(7))
        win = False
        while True:
            # Here we can call a gameplay function, which will
            # take in user input and decide what to do based
            # on it, as well as control enemies
            c = mapObj.stdscr.getch()
            if c == ord('q') or c == ord('n'):
                break

            elif c == ord('w'):
                win = playObj.move('w', mapObj)

            elif c == ord('a'):
                win = playObj.move('a', mapObj)
            
            elif c == ord('s'):
                win = playObj.move('s', mapObj)

            elif c == ord('d'):
                win = playObj.move('d', mapObj)
            elif c == curses.KEY_LEFT or c == curses.KEY_RIGHT or c == curses.KEY_UP or c == curses.KEY_DOWN:
                use_weapon(c, playObj, mapObj)

            menuObj.display_menu(mapObj.maxX+2)
            if win:
                win = False
                break
            
            #print("x: ", playObj.x_pos, "y: ", playObj.y_pos) test to see if map bounds weren't violated.

        if c == ord('q'):
            mapObj.stdscr.clear()
            mapObj.stdscr.refresh()
            break

        mapObj.stdscr.clear()
        mapObj.stdscr.refresh()
        fileNum += 1

    curses.nocbreak()
    mapObj.stdscr.keypad(False)
    curses.echo()
    curses.endwin()

    # print('maxY: ', mapObj.maxY, '\nmaxX: ', mapObj.maxX) # This was a test,
    # proves that we don't need a getter, we can reference class objects directly
